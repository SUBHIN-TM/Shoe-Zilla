<div class="content-wrapper">
    <div class="container-fluid">
        <div class="row">
            <div class="col-9">
                <div class="modal-body">
                    <!-- Add your form here -->
                    <form id="addForm" enctype="multipart/form-data">

                        <!-- Category dropdown -->
                        <div class="mb-3">
                            <label for="productCategory" class="form-label">Category</label>
                            <select class="form-select w-100" id="productCategory" name="productCategory">
                                <option value="{{productCategory}}">{{productCategory}}</option>
                                {{#each category}}
                                <option value="{{this.categoryName}}">{{this.categoryName}}</option>
                                {{/each}}
                            </select>
                        </div>

                        <!-- Subcategory dropdown -->
                        <div class="mb-3">
                            <label for="productSubCategory" class="form-label">Subcategory</label>
                            <select class="form-select w-100" id="productSubCategory" name="productSubCategory">
                                <option value="{{productSubCategory}}">{{productSubCategory}}</option>
                                {{#each subCategory}}
                                <option value="{{this.subCategoryName}}">{{this.subCategoryName}}</option>
                                {{/each}}
                            </select>
                        </div>

                        <!-- Brand dropdown -->
                        <div class="mb-3">
                            <label for="productBrand" class="form-label">Brand</label>
                            <select class="form-select w-100" id="productBrand" name="productBrand">
                                <option value="{{productBrand}}">{{productBrand}}</option>
                                {{#each brand}}
                                <option value="{{this.brandName}}">{{this.brandName}}</option>
                                {{/each}}
                            </select>
                        </div>




                        <div class="mb-3">

                            <label for="">Current Product Images</label><br>
                            {{#each productImage}}
                            <img src="{{this.url}}" style="width: 90px;" alt="">
                            {{/each}}
                            <br>

                            <label for="productImage" class="form-label">Product Image URL</label>
                            <input type="file" class="form-control" id="productImage" name="images" multiple>
                            <small style="color:greenyellow;" id="productImageError"></small>
                        </div>

                        <div class="mb-3">
                            <label for="productName" class="form-label">Product Name</label>
                            <input type="text" class="form-control" id="productName" name="productName"
                                value="{{productName}}" oninput="capitalize(this)">
                            <small style="color: red;" id="productNameError"></small>
                        </div>

                        <div class="mb-3">
                            <label for="productColor" class="form-label">Product Color</label>
                            <input type="text" class="form-control" id="productColor" name="productColor"
                                value="{{productColor}}" oninput="trimAndCapital(this)">
                            <small style="color: red;" id="productColorError"></small>
                        </div>


                        <div class="mb-3">
                            <label for="productMRP" class="form-label">Product MRP</label>
                            <input type="number" class="form-control" id="productMRP" name="productMRP"
                                value="{{productMRP}}">
                            <small style="color: red;" id="productMRPError"></small>
                        </div>

                        <div class="mb-3">
                            <label for="productPrice" class="form-label">Product Price</label>
                            <input type="number" class="form-control" id="productPrice" name="productPrice"
                                value="{{productPrice}}">
                            <small style="color: red;" id="productPriceError"></small>
                        </div>

                        <div class="mb-3">
                            <label for="productDescription" class="form-label">Product Description</label>
                            <input type="text" class="form-control" id="productDescription" name="productDescription"
                                placeholder="Min 10 Words Max 200 Words" value="{{productDescription}}">
                            <small style="color: red;" id="productDescriptionError"></small>
                        </div>


                        <div class="mb-3">
                            <label for="productSize" class="form-label">Size And quantity </label>
                            <div class="btn btn-light  ms-md-5" onclick="addRow()">Add Field</div><span> <small
                                    style="color: red;" id="fieldError"></small></span>
                            <div class="row p-3" id="dynamicRows">
                                {{#each productSizeAndQty}}

                                {{!-- stop --}}
                                <div class="mb-1 ">
                                    <label for="size" class="ml-3 "> Size</label>
                                    <input type="number" name="size" value="{{this.size}}" placeholder="7-12">
                                    <small style="color: red;" class="sizeError"></small>
                                    <label for="qty" class="ml-3 ">Quanity</label>
                                    <input type="number" name="qty" value="{{this.qty}}" placeholder=" mxm Limit 9999">
                                    <small style="color: red;" class="qtyError"></small>
                                    <button type="button" class="deleteButton mt-2 ">Delete Row</button>
                                </div>

                                {{/each}}
                            </div>
                        </div>

                        <!-- Add other form fields based on your table headers -->
                        <button type="submit" class="btn btn-success" onclick="validation('{{productId}}')">Update
                            Product</button>
                    </form>
                    {{!-- FFORM END --}}
                </div>
            </div>
        </div>
    </div>
</div>


<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
    crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<script>
    //CAPITALIZING
    var sizeArray = []
    var qtyArray = []
    var productSizeAndQty = []


    function capitalize(inputElement) { //GIVING THIS AS ARGUMENT FROM FORM SO WE CAN GET THE EACH AND EVERY DETAILS OF ALL THINGS FOM THAT INPUT FIELD EG=ID,NAME,INPUTtYPEetc...
        // alert(inputElement.id)
        let inputValue = inputElement.value;
        let capitalizedValue = inputValue.charAt(0).toUpperCase() + inputValue.slice(1);
        inputElement.value = capitalizedValue;
    };

    function trimAndCapital(inputElement) {
        let inputValue = inputElement.value;
        let capAndTrim = inputValue.toUpperCase().trim();
        inputElement.value = capAndTrim;
    }


    //ALL READY CONTAINED ROW DELETE
    $('.deleteButton').on('click', function () {
        $(this).closest("div").remove(); //delete closet div or including div

    })



    function addRow() {
        event.preventDefault();
        $('#fieldError').html("")
        var newRow = '<div class="mb-1" style"margin-left:5px">' +
            '<label for="size" style="margin-right: 1.9rem;"> Size</label>' +
            '<input type="number" placeholder="7-12" name="size">' +
            ' <small style="color: red;" class="sizeError"></small>' +
            '<label for="qty" style="margin-right: 0.4rem;">Quanity</label>' +
            '<input type="number"  placeholder=" mxm Limit 9999" name="qty">' +
            ' <small style="color: red;" class="qtyError"></small>' +
            '</div>' +
            '<div class="DynamicButton" >Delete Row</div>'
        $('#dynamicRows').append(newRow);
        sizeArray = []
        qtyArray = []
        productSizeAndQty = []
    }

    $('#dynamicRows').on('click', '.DynamicButton', function () {
        $(this).closest('div').prev('div').remove(); //THIS REFFER ROW BUTTON .PRE SELECT THE IMMEDIATELY PRECEDING DIV IE  SELECT DIV JUST BEFORE THE DIV OF ROWBUTTON DIV THAT IS <div class="mb-1">
        $(this).closest('div').remove(); //IT REFFERS ITS NEAREST AND ITS OWN AND DELETE THE DELETE ROW BUTTON ALSO 
    })




    function validation(id) {
        event.preventDefault();
        let E = 0;

        //DYNAMIC SECTION VALIDATION HERE
        $('.sizeError').html('');
        $('.qtyError').html('');

        $('input[name^="size"]').each(function () {
            let size = $(this).val();
            if (size < 7 || size > 12) {
                $(this).next('.sizeError').html('Size Should between 7-12')
                E++;
            } else if (sizeArray.includes(size)) {
                $(this).next('.sizeError').html('Same Size already mentioned')
                E++;
            }
            else {
                sizeArray.push(size);
            }
        });



        $('input[name^="qty"]').each(function () { //THIS CODE SELECT ALL INPUT  WHICH  HAS THE NAME = QTY  
            let qty = $(this).val();
            if (! /^(?!0)(?!-)\d{1,4}$/.test(qty)) {
                $(this).next('.qtyError').html('Quantity Should 1-9999')
                E++;
            } else {
                qtyArray.push(qty);
            }
        });



        productSizeAndQty = sizeArray.map((data, index) => ({
            size: data, qty: qtyArray[index]
        }));
        //DYNAMIC END
        console.log("size Arry Till Validation", sizeArray)
        console.log("qty Arry Till Validation", qtyArray)
        console.log("size&qty Arry Till Validation", productSizeAndQty)


        //ALL FORM FIELD VALUES
        let image = $('#productImage');
        let color = $('#productColor').val();
        let name = $('#productName').val();
        let MRP = $('#productMRP').val();
        let price = $('#productPrice').val();
        let descriptValue = $('#productDescription').val();
        let descript = descriptValue.split(""); //split by charcters 

        //ALL FORM ERROR FIELDS
        let imageError = $('#productImageError');
        let nameError = $('#productNameError');
        let colorError = $('#productColorError');
        let MRPError = $('#productMRPError');
        let priceError = $('#productPriceError');
        let descriptError = $('#productDescriptionError');


        // Reset error messages
        imageError.html('');
        nameError.html('');
        colorError.html('');
        MRPError.html('');
        priceError.html('');
        descriptError.html('');
        $('#fieldError').html("")

        // REGEX FOR VALIDATIONS
        let numberRegex = /^(?!0)(?!-)\d{1,4}$/; // 1-4 digits, no space, no negative number, only positive numbers
        let colorRegex = /^[a-zA-Z]+(?:\s[a-zA-Z]+)*$/
        let nameRegex = /^(?=.*[a-zA-Z])[a-zA-Z0-9\s\-.,'/]{1,100}$/


        // CHECKING EACH FIELDS FOR CORRESPONDING VALIDATIONS
        if (descript.length <= 10 || descript.length >= 500) {
            descriptError.html('Minimum 10 Words Maximum 500 Words');
            E++;
        }
        if (productSizeAndQty.length == 0) {
            $('#fieldError').html("Size And Quantity Should Mention")
            E++;
        }
        if (image.get(0).files.length == 0) {
            imageError.html('Image will remain same');
        }
        if (!nameRegex.test(name)) {
            nameError.html('Invalid Name / Length Shoulb Be 1-100 Char');
            E++;
        }
        if (!colorRegex.test(color)) {
            colorError.html('Invalid Color');
            E++;
        }
        if (!numberRegex.test(MRP)) {
            MRPError.html('Invalid MRP /Maximum 4 Digits');
            E++;
        }
        if (!numberRegex.test(price)) {
            priceError.html('Invalid Price /Maximum 4 Digits');
            E++;
        } else if (parseInt(price) >= parseInt(MRP)) {
            priceError.html('price should less than MRP');
            E++;
        }


        if (E != 0) {
            sizeArray = []
            qtyArray = []
            productSizeAndQty = []
            return
        } else {
            //console.log(productSizeAndQty) MADE SIZE AND QTY AS ARRAY TO SEND
            editProduct(id, productSizeAndQty)

        }

    };



    //only works after dom fully loaded
    function editProduct(productId, productSizeAndQty) {
        event.preventDefault();
        let productCategory = $("#productCategory").val()
        let productSubCategory = $("#productSubCategory").val()
        let productBrand = $("#productBrand").val()
        let productName = $("#productName").val()
        let productColor = $("#productColor").val()
        let productPrice = $("#productPrice").val()
        let productMRP = $("#productMRP").val()
        let productDescription = $('#productDescription').val();
        let productImages = document.getElementById('productImage').files;

        //alert(`${productCategory},${productSubCategory},${productBrand},${productName},${productColor},${productSize},${productQty},${productPrice}`)

        //create form data
        const formData = new FormData();

        formData.append('productCategory', productCategory);
        formData.append('productSubCategory', productSubCategory);
        formData.append('productBrand', productBrand);
        formData.append('productName', productName);
        formData.append('productColor', productColor);
        formData.append('productPrice', productPrice);
        formData.append('productMRP', productMRP);
        formData.append('productDescription', productDescription);
        formData.append('productSizeAndQty', JSON.stringify(productSizeAndQty));


        // formData.append('image',productImage);
        for (let i = 0; i < productImages.length; i++) {
            formData.append('images', productImages[i])
        }



        // const data = {productQty,productPrice,productSize,productColor,productCategory,productSubCategory,productBrand,productName }
        axios.put(`/vendor/editProducts/${productId}`, formData, {
            headers: {
                'Content-Type': 'multipart/form-data'
            }
        })
            .then(response => {
                if (response.data.success) { //THIS SUCCESS TRIGEER WHEN UPDTED SUCCES RETURN
                    console.log("successfully updated")
                    document.cookie = "alertDefined=" + JSON.stringify(response.data.success); //CREATED A COOKIE NAMED ALRTDEFINED AND IT SEND AS THE DOCUMENTS IN THE FORM OF STRING
                    window.location.href = '/vendor/ViewProducts'
                } else {
                    throw new Error('cant modify now')
                }
            })
            .catch(error => {
                alert("cant modify now")
                console.log(error)
            });
    };


</script>